version: '3.9'

volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  # production_traefik: {}

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
    image: apps_production_django
    platform: linux/x86_64
    depends_on:
      - postgres
      - redis
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    command: /start
    networks:
      - front
      - back
    restart: unless-stopped
    expose:
      - 5000
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=front"
      - "traefik.http.routers.django.priority=10"
      # Asociates router with your specific domain or subdomain and websecure (https)
      - "traefik.http.routers.django.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)"
      - "traefik.http.routers.django.entrypoints=websecure"
      # Enables tls
      - "traefik.http.routers.django.tls=true"
      # Asociation with resolver (see static.yml file)
      - "traefik.http.routers.django.tls.certresolver=letsencrypt"
      # add security middleware
      - "traefik.http.routers.django.middlewares=security-headers@file,compression@file"
      # Set default options (see dynamic.yaml for this)
      - "traefik.http.routers.django.tls.options=default"
      # loadbalancer
      - "traefik.http.services.django.loadbalancer.server.port=5000"

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: apps_production_postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data:Z
      - production_postgres_data_backups:/backups:z
    env_file:
      - ./.envs/.production/.postgres
    networks:
      - back
    restart: unless-stopped
    labels:
      - traefik.enable=false

  # traefik:
  #   build:
  #     context: .
  #     dockerfile: ./compose/production/traefik/Dockerfile
  #   image: apps_production_traefik
  #   depends_on:
  #     - django
  #   volumes:
  #     - production_traefik:/etc/traefik/acme:z
  #   ports:
  #     - "0.0.0.0:80:80"
  #     - "0.0.0.0:443:443"
  #     - "0.0.0.0:5555:5555"

  redis:
    image: redis:6
    networks:
      - back
    labels:
      - traefik.enable=false

  celeryworker:
    <<: *django
    image: apps_production_celeryworker
    command: /start-celeryworker
    networks:
      - back
    labels:
      - traefik.enable=false

  celerybeat:
    <<: *django
    image: apps_production_celerybeat
    command: /start-celerybeat
    networks:
      - back
    labels:
      - traefik.enable=false

  flower:
    <<: *django
    image: apps_production_flower
    command: /start-flower
    networks:
      - front
      - back
    labels:
      - "traefik.enable=true"
      # - "traefik.http.routers.flower.priority=20"
      # Asociates router with your specific domain or subdomain and websecure (https)
      # - "traefik.http.routers.flower.rule=Host(`flower.${DOMAIN}`)"
      # - "traefik.http.routers.flower.entrypoints=websecure"
      # Asociates flower router with your specific port (https)
      - "traefik.http.routers.flower.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.flower.entrypoints=flower"
      # Enables tls
      - "traefik.http.routers.flower.tls=true"
      # Asociation with resolver (see static.yml file)
      - "traefik.http.routers.flower.tls.certresolver=letsencrypt"
      # add security middleware
      - "traefik.http.routers.flower.middlewares=security-headers@file"
      # Set default options (see dynamic.yaml for this)
      - "traefik.http.routers.flower.tls.options=default"
      # loadbalancer
      - "traefik.http.services.flower.loadbalancer.server.port=5555"
      - "traefik.docker.network=front"
    expose:
      - 5555

  awscli:
    build:
      context: .
      dockerfile: ./compose/production/aws/Dockerfile
    env_file:
      - ./.envs/.production/.django
    volumes:
      - production_postgres_data_backups:/backups:z

networks:
  front:
    name: front
  back:
    name: back
